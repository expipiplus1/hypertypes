-- | A type for unification errors

{-# LANGUAGE TemplateHaskell, UndecidableInstances #-}

module Hyper.Unify.Error
    ( UnifyError(..)
    , _SkolemUnified, _SkolemEscape, _ConstraintsViolation
    , _Occurs, _Mismatch
    ) where

import           Generics.Constraints (Constraints)
import           Hyper
import           Hyper.TH.Functor (makeHFunctor)
import           Hyper.TH.Traversable (makeHTraversableAndFoldable)
import           Hyper.Unify.Constraints (TypeConstraintsOf)
import           Text.PrettyPrint ((<+>))
import qualified Text.PrettyPrint as Pretty
import           Text.PrettyPrint.HughesPJClass (Pretty(..), maybeParens)

import           Hyper.Internal.Prelude

-- | An error that occurred during unification
data UnifyError t h
    = SkolemUnified (h :# t) (h :# t)
      -- ^ A universally quantified variable was unified with a
      -- different type
    | SkolemEscape (h :# t)
      -- ^ A universally quantified variable escapes its scope
    | ConstraintsViolation (t h) (TypeConstraintsOf t)
      -- ^ A term violates constraints that should apply to it
    | Occurs (t h) (t h)
      -- ^ Infinite type encountered. A type occurs within itself
    | Mismatch (t h) (t h)
      -- ^ Unification between two mismatching type structures
    deriving Generic

makePrisms ''UnifyError
makeCommonInstances [''UnifyError]

-- This HNodes instance and W_UnifyError datatype were copied from the "-ddump-splices" TH output.
-- GHC 9.0.1 won't accept it when generated by TH. Bug?
instance HNodes t => HNodes (UnifyError t) where
    type HNodesConstraint (UnifyError t) c = (HNodesConstraint t c, c t)
    type HWitnessType (UnifyError t) = W_UnifyError t
    {-# INLINE hLiftConstraint #-}
    hLiftConstraint (HWitness W_UnifyError_t) = \_ r -> r
    hLiftConstraint (HWitness (E_UnifyError_t w)) = hLiftConstraint w
data W_UnifyError t n where
    W_UnifyError_t :: W_UnifyError t t
    E_UnifyError_t :: HWitness t n -> W_UnifyError t n

makeHFunctor ''UnifyError
makeHTraversableAndFoldable ''UnifyError

instance Constraints (UnifyError t h) Pretty => Pretty (UnifyError t h) where
    pPrintPrec lvl p =
        maybeParens haveParens . \case
        SkolemUnified x y        -> Pretty.text "SkolemUnified" <+> r x <+> r y
        SkolemEscape x           -> Pretty.text "SkolemEscape:" <+> r x
        Mismatch x y             -> Pretty.text "Mismatch" <+> r x <+> r y
        Occurs x y               -> r x <+> Pretty.text "occurs in itself, expands to:" <+> right y
        ConstraintsViolation x y -> Pretty.text "ConstraintsViolation" <+> r x <+> r y
        where
            haveParens = p > 10
            right
                | haveParens = pPrintPrec lvl 0
                | otherwise = pPrintPrec lvl p
            r :: Pretty a => a -> Pretty.Doc
            r = pPrintPrec lvl 11
